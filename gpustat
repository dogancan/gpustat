#!/usr/bin/env python

"""
the gpustat script :)

@authors Jongwook Choi
         Dogan Can
"""

from __future__ import print_function
from subprocess import check_output, CalledProcessError
from datetime import datetime
from collections import OrderedDict, defaultdict
try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO
import sys
import locale
import platform


class ANSIColors:
    RESET = '\033[0m'
    WHITE = '\033[1m'
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[0;33m'
    BLUE = '\033[0;34m'
    MAGENTA = '\033[0;35m'
    CYAN = '\033[0;36m'
    GRAY = '\033[1;30m'
    BOLD_RED = '\033[1;31m'
    BOLD_GREEN = '\033[1;32m'
    BOLD_YELLOW = '\033[1;33m'
    BOLD_BLUE = '\033[1;34m'
    BOLD_MAGENTA = '\033[1;35m'
    BOLD_CYAN = '\033[1;36m'
    BLACK_ON_GREEN_BG = '\033[0;30;42m'

    @staticmethod
    def wrap(color, msg):
        return (color + msg + ANSIColors.RESET)


class GPUStat(object):

    def __init__(self, entry):
        if not isinstance(entry, dict):
            raise TypeError(
                'entry should be a dict, {} given'.format(type(entry)))
        self.entry = entry
        self.processes = []

    def __repr__(self):
        return self.print_gpu_stats(StringIO()).getvalue()

    def print_gpu_stats(self, with_colors=True, gpuname_width=16):
        # color settings
        colors = defaultdict(str)
        if with_colors:
            colors['Reset'] = ANSIColors.RESET
            colors['ID'] = ANSIColors.RESET
            colors['Name'] = ANSIColors.RESET
            colors['Perf'] = ANSIColors.RESET
            if int(self.entry['fan.speed']) < 80:
                colors['Fan'] = ANSIColors.RESET
            else:
                colors['Fan'] = ANSIColors.RED
            if int(self.entry['temperature.gpu']) < 80:
                colors['Temp'] = ANSIColors.BLUE
            else:
                colors['Temp'] = ANSIColors.RED
            power_usage = (float(self.entry['power.draw']) /
                           float(self.entry['power.limit']))
            if power_usage < 0.8:
                colors['PowerD'] = ANSIColors.RESET
            else:
                colors['PowerD'] = ANSIColors.RED
            colors['PowerL'] = ANSIColors.RESET
            if int(self.entry['utilization.gpu']) < 30:
                colors['UtilG'] = ANSIColors.RESET
            else:
                colors['UtilG'] = ANSIColors.GREEN
            if int(self.entry['utilization.memory']) < 30:
                colors['UtilM'] = ANSIColors.RESET
            else:
                colors['UtilM'] = ANSIColors.GREEN
            mem_usage = (float(self.entry['memory.used']) /
                         float(self.entry['memory.total']))
            if mem_usage < 0.8:
                colors['MemU'] = ANSIColors.YELLOW
            else:
                colors['MemU'] = ANSIColors.RED
            colors['MemT'] = ANSIColors.YELLOW

        # build one-line display information
        rep = ("{c[ID]}[{e[index]}]{c[Reset]} " +
               "{c[Name]}{e[name]:{w}}{c[Reset]} | " +
               "{c[Perf]}{e[pstate]:4}{c[Reset]}" +
               "{c[Fan]}{e[fan.speed]:>3}%{c[Reset]} " +
               "{c[Temp]}{e[temperature.gpu]:>2}'C{c[Reset]} " +
               "{c[PowerD]}{power_draw:>3}W{c[Reset]} / " +
               "{c[PowerL]}{power_limit:>3}W{c[Reset]} |" +
               "{c[UtilG]}{e[utilization.gpu]:>3}%{c[Reset]} " +
               "{c[UtilM]}{e[utilization.memory]:>3}%{c[Reset]} |" +
               "{c[MemU]}{e[memory.used]:>5}M{c[Reset]} / " +
               "{c[MemT]}{e[memory.total]:>5}M{c[Reset]}"
               ).format(c=colors, e=self.entry, w=gpuname_width,
                        power_draw=int(float(self.entry['power.draw'])),
                        power_limit=int(float(self.entry['power.limit'])))

        print(rep)

    def print_process_stats(self, with_colors=True, cols=0):
        # color settings
        colors = defaultdict(str)
        if with_colors:
            colors['Reset'] = ANSIColors.RESET
            colors['MemP'] = ANSIColors.RESET

        # build one-line display information
        def process_repr(process):
            mem_usage = (float(process['fb']) /
                         float(self.entry['memory.total']))
            if with_colors and mem_usage > 0.4:
                colors['MemP'] = ANSIColors.RED
            rep = ("{e[index]:3}" +
                   "{p[pid]:>8}  " +
                   "{p[user]:8}" +
                   "{p[type]:>6}" +
                   "{p[sm]:>9}%" +
                   "{p[mem]:>9}%" +
                   "{c[MemP]}{p[fb]:>8}M{c[Reset]}  "
                   ).format(c=colors, e=self.entry, p=process)
            if cols > 58:
                rep += "{:.{width}}".format(process['comm'], width=cols - 58)
            else:
                rep += process['comm']
            return rep

        reps = '\n'.join(map(process_repr, self.processes))
        print(reps)

    @property
    def index(self):
        return self.entry['index']

    def add_process(self, p):
        self.processes.append(p)
        return self


class GPUStatCollection(object):

    def __init__(self, gpu_list):
        self.gpus = OrderedDict()
        for g in gpu_list:
            self.gpus[g.index] = g

        self.update_process_information()

    @staticmethod
    def new_query():
        # 1. get the list of gpu and status
        gpu_query_columns = ('index', 'uuid', 'name', 'pstate',
                             'fan.speed', 'temperature.gpu',
                             'power.draw', 'power.limit',
                             'utilization.gpu', 'utilization.memory',
                             'memory.used', 'memory.total')
        gpu_list = []

        smi_output = check_output(
            r'nvidia-smi --query-gpu={} --format=csv,noheader,nounits'
            .format(','.join(gpu_query_columns)),
            shell=True).decode().strip()

        for line in smi_output.split('\n'):
            if not line:
                continue
            query_results = line.split(',')

            g = GPUStat({k: v.strip() for (k, v)
                         in zip(gpu_query_columns, query_results)})
            gpu_list.append(g)

        return GPUStatCollection(gpu_list)

    @staticmethod
    def running_processes():
        # 1. collect all running GPU processes
        gpu_query_columns = ('gpu_index', 'pid', 'type', 'sm', 'mem', 'enc',
                             'dec', 'fb', 'comm')
        smi_output = check_output('nvidia-smi pmon -c 1 -s um',
                                  shell=True).decode()

        process_entries = []
        for line in smi_output.split('\n'):
            if not line or line.startswith("#"):
                continue
            query_results = line.strip().split()
            if query_results[1] == "-":
                continue
            process_entry = dict({k: v.strip() for (k, v)
                                  in zip(gpu_query_columns, query_results)})
            process_entries.append(process_entry)

        pid_map = {int(e['pid']): None for e in process_entries}

        # 2. map pid to username, etc.
        if pid_map:
            pid_output = check_output('ps -o {} -p {} -w'.format(
                'pid,user,args',
                ','.join(map(str, pid_map.keys()))
            ), shell=True).decode().strip()
            for line in pid_output.split('\n'):
                if (not line) or 'PID' in line:
                    continue
                pid, user, comm = line.split(None, 2)
                pid_map[int(pid)] = {'user': user, 'comm': comm}

        # 3. add some process information to each process_entry
        for process_entry in process_entries[:]:
            pid = int(process_entry['pid'])
            if pid_map[pid] is None:
                # !?!? this pid is listed up in nvidia-smi's query result,
                # but actually seems not to be a valid running process. ignore!
                process_entries.remove(process_entry)
                continue
            process_entry.update(pid_map[pid])

        # process_entries.sort(key=lambda p: int(p['fb']), reverse=True)
        return process_entries

    def update_process_information(self):
        processes = self.running_processes()
        for p in processes:
            try:
                g = self.gpus[p['gpu_index']]
            except KeyError:
                # ignore?
                pass
            g.add_process(p)
        return self

    def __repr__(self):
        s = 'GPUStatCollection([\n'
        s += '\n'.join('  ' + str(g) for g in self.gpus)
        s += '\n])'
        return s

    def __len__(self):
        return len(self.gpus)

    def __iter__(self):
        return iter(self.gpus.values())

    def __getitem__(self, index):
        return list(self.gpus.values())[index]


def print_stats(color=False, truncate=False):
    '''
    Display the GPU query results into standard output.
    '''
    try:
        gpu_stats = GPUStatCollection.new_query()
    except CalledProcessError:
        sys.stderr.write('Error on calling nvidia-smi\n')
        sys.exit(1)

    # host
    rows, cols = map(int, check_output(['stty', 'size']).split())
    hostname = platform.node()
    timestr = datetime.now().strftime(locale.nl_langinfo(locale.D_T_FMT))
    padding = " " * (cols - len(hostname) - len(timestr))
    host_header = '%(WHITE)s{}%(RESET)s{}{}\n ' \
        % (ANSIColors.__dict__ if color else defaultdict(str))
    host_header = host_header.format(hostname, padding, timestr)
    print(host_header)

    # gpu stats
    gsh = ('GPU NAME                  PERF FAN TEMP    POWER      '
           'GPU  MEM       MEM-USE')
    gpu_stats_header = '{:{cols}}'.format(gsh, cols=cols)
    print(gpu_stats_header)
    gpuname_width = max([16] + [len(g.entry['name']) for g in gpu_stats])
    for g in gpu_stats:
        g.print_gpu_stats(with_colors=color,
                          gpuname_width=gpuname_width)
    print()

    # process stats
    psh = 'GPU     PID  USER      TYPE  GPU-UTIL  MEM-UTIL  MEM-USE  COMMAND'
    process_stats_header = '{:{cols}}'.format(psh, cols=cols)
    if color:
        process_stats_header = ANSIColors.wrap(ANSIColors.BLACK_ON_GREEN_BG,
                                               process_stats_header)
    print(process_stats_header)
    for g in gpu_stats:
        g.print_process_stats(with_colors=color,
                              cols=cols if truncate else 0)


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--color', action='store_true',
                        help='Color output')
    parser.add_argument('--truncate', action='store_true',
                        help='Truncate output to console width')
    args = parser.parse_args()

    print_stats(**vars(args))

if __name__ == '__main__':
    main()
